Задача 1: Настройка маршрутизации React- web site приложения

1. Создать файловую структуру для маршрутов в соответствии с API-эндпоинтами:
   - /auth/login и /auth/register
   - /api/admin/* для администраторов
   - /api/teacher/* для преподавателей
   - /api/student/* для студентов
2. Настроить React Router с защищенными маршрутами на основе ролей пользователей
3. Создать страницы-заглушки для каждого маршрута
4. Создать компонент перенаправления для неавторизованных пользователей
----

Задача 2: Реализация аутентификации

1. Создать API-сервис для работы с аутентификацией:
   - Функция login для вызова /auth/login
   - Функция register для вызова /auth/register
2. Разработать механизм хранения и обновления токена
3. Реализовать контекст аутентификации (AuthContext)
4. Создать компоненты формы входа и регистрации
5. Добавить перехватчик для автоматического добавления токена к запросам
-----

Задача 3: Реализация механизма хранения токена

1. Создать компоненты для аутентификации:
   - Форма входа
   - Форма регистрации
   - Компонент хранения состояния аутентификации
2. Реализовать механизм хранения токена в localStorage
    3. Создать компоненты для защиты маршрутов:
       - HOC для защиты маршрутов
       - Компоненты для перенаправления
    4. Реализовать механизм проверки аутентификации
    5. Создать компоненты для отображения статуса аутентификации
    6. Реализовать механизм обновления токена
    ----

Задача 4: Реализация механизма защиты маршрутов

1. Создать компоненты для управления курсами:
   - Список курсов (/api/admin/courses)
   - Создание курса (/api/admin/courses)
   - Редактирование курса (/api/admin/courses/:id)
   - Удаление курса (/api/admin/courses/:id)
2. Создать компоненты для управления студентами на курсах:
   - Добавление студента на курс (/api/admin/courses/:id/students)
   - Удаление студента с курса (/api/admin/courses/:id/students/:student_id)
3. Разработать компоненты для просмотра логов и метрик:
   - Логи (/api/admin/logs)
   - События (/api/admin/events)
   - Метрики (/api/admin/metrics)
----

Задача 5: Реализация механизма защиты маршрутов преподавателя

1. Создать компоненты для работы с курсами преподавателя:
   - Список курсов (/api/teacher/courses)
2. Создать компоненты для работы с заданиями:
   - Список заданий (/api/teacher/courses/:id/assignments)
   - Создание задания (/api/teacher/courses/:id/assignments)
   - Редактирование задания (/api/teacher/assignments/:id)
   - Удаление задания (/api/teacher/assignments/:id)
3. Создать компоненты для работы с оценками:
   - Список оценок для задания (/api/teacher/assignments/:id/grades)
   - Создание оценки (/api/teacher/assignments/:id/grades)
   - Редактирование оценки (/api/teacher/grades/:id)
   - Удаление оценки (/api/teacher/grades/:id)

Задача 6: Реализация механизма просмотра курсов студентом

1. Создать компоненты для просмотра курсов:
   - Список курсов студента (/api/student/courses)
   - Детали курса (/api/student/courses/:id)
2. Создать компоненты для работы с заданиями:
   - Список заданий курса (/api/student/courses/:id/assignments)
3. Создать компоненты для просмотра оценок:
    - Список оценок студента (/api/student/grades)

----

Задача 7: Реализация механизма базового HTTP-клиента

1. Создать базовый HTTP-клиент с использованием axios:
   - Настройка базового URL
   - Обработка ошибок
   - Добавление токена авторизации
2. Создать API-сервисы для каждой сущности:
   - UserService
       - CourseService
       - AssignmentService
       - GradeService
       - EventService
       - LogService
    3. Реализовать типы данных TypeScript, соответствующие моделям Go

----

Задача 8: Реализация механизма хранилища состояний

1. Создать хранилище состояний с использованием Redux или Context API
2. Реализовать селекторы для получения данных
3. Реализовать actions/reducers для работы с API
4. Добавить кэширование данных
5. Реализовать механизм пагинации для списков

----

Задача 9: Реализация механизма базовых UI компонентов

1. Создать базовые UI компоненты:
   - Кнопки, формы, поля ввода
   - Таблицы и списки
   - Модальные окна и диалоги
   - Навигационные элементы
2. Создать составные компоненты:
   - Карточки курсов и заданий
   - Формы с валидацией
   - Компоненты с загрузкой данных
3. Создать шаблоны страниц с общим layout

----

Задача 10: Настройка Tailwind CSS и shadcn/ui

1. Настроить Tailwind CSS и shadcn/ui
2. Создать темы (светлую и темную)
3. Адаптировать интерфейс для мобильных устройств
4. Добавить анимации и переходы
5. Создать стили для состояний компонентов (загрузка, ошибка, пустые данные)

----
 